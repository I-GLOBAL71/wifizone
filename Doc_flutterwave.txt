# Guide Complet d'Int√©gration de l'API Flutterwave

## Table des Mati√®res
1. [Introduction](#introduction)
2. [Pr√©requis](#pr√©requis)
3. [Authentification](#authentification)
4. [Modes de Paiement](#modes-de-paiement)
5. [Impl√©mentation HTML Checkout](#impl√©mentation-html-checkout)
6. [Impl√©mentation JavaScript Inline](#impl√©mentation-javascript-inline)
7. [V√©rification des Transactions](#v√©rification-des-transactions)
8. [Gestion des Webhooks](#gestion-des-webhooks)
9. [Cartes de Test](#cartes-de-test)
10. [S√©curit√© et Bonnes Pratiques](#s√©curit√©-et-bonnes-pratiques)

---

## Introduction

Flutterwave est une plateforme de paiement qui permet de collecter des paiements de mani√®re s√©curis√©e via plusieurs m√©thodes (cartes bancaires, transferts bancaires, mobile money, etc.). L'API offre plusieurs options d'int√©gration adapt√©es √† vos besoins.

**URL de Base de l'API**: `https://api.flutterwave.com/v3/`

---

## Pr√©requis

### 1. Cr√©er un Compte Flutterwave
- Inscrivez-vous sur [Flutterwave](https://onboarding.flutterwave.com/signup)
- V√©rifiez votre email et compl√©tez votre profil

### 2. Obtenir vos Cl√©s API
Vous recevrez **3 types de cl√©s** :

- **Secret Key** : Acc√®s complet √† votre compte (c√¥t√© serveur uniquement)
- **Public Key** : Pour les int√©grations c√¥t√© client (JavaScript)
- **Encryption Key** : Pour chiffrer les donn√©es sensibles (paiements par carte directe)

#### Comment R√©cup√©rer vos Cl√©s ?
1. Connectez-vous √† votre [Dashboard Flutterwave](https://app.flutterwave.com/login)
2. Allez dans **Settings** ‚Üí **API Keys** (section DEVELOPERS)
3. Copiez vos cl√©s

**‚ö†Ô∏è Important** : Les cl√©s de test ont le pr√©fixe `_TEST` (ex: `FLWPUBK_TEST-xxxxx`)

---

## Authentification

### Modes d'Op√©ration

#### 1. Mode Test
- Pas d'argent r√©el
- Utiliser les cartes et comptes de test
- Id√©al pour d√©velopper et tester votre int√©gration
- Toggle: Activer le mode Test dans votre dashboard

#### 2. Mode Live (Production)
- Transactions r√©elles avec de l'argent r√©el
- √Ä utiliser uniquement apr√®s avoir test√© en mode Test
- Cl√©s masqu√©es pour plus de s√©curit√©

### Autorisation des Appels API

Toutes les requ√™tes API doivent inclure votre **Secret Key** dans le header `Authorization` :

```http
Authorization: Bearer YOUR_SECRET_KEY
```

#### Exemple avec Node.js

```javascript
const response = await fetch("https://api.flutterwave.com/v3/payments", {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${process.env.FLW_SECRET_KEY}`,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    // Votre payload
  })
});
```

#### Exemple avec SDK Node.js

```javascript
// Installation : npm install flutterwave-node-v3
const Flutterwave = require('flutterwave-node-v3');

const flw = new Flutterwave(
  process.env.FLW_PUBLIC_KEY,
  process.env.FLW_SECRET_KEY
);

// Les appels suivants incluront automatiquement le header
```

### üîê S√©curit√© des Cl√©s
- **JAMAIS** exposer votre Secret Key dans le code frontend
- Stocker les cl√©s comme variables d'environnement
- Ne pas les commiter sur Git
- Si compromises, g√©n√©rer de nouvelles cl√©s imm√©diatement

---

## Modes de Paiement

Flutterwave supporte plusieurs m√©thodes de paiement :

- **card** : Cartes bancaires (Visa, Mastercard, etc.)
- **bank_transfer** : Virements bancaires
- **ussd** : Paiements USSD
- **mobile_money** : Mobile Money (MTN, Airtel, etc.)
- **qr** : QR Code (Nigeria uniquement)
- **mpesa** : M-Pesa (Kenya, Tanzanie)
- **banktransfer** : Transfert bancaire direct

---

## Impl√©mentation HTML Checkout

### M√©thode Simple (Redirection vers Page de Paiement)

Le HTML Checkout redirige vos utilisateurs vers une page de paiement h√©berg√©e par Flutterwave.

#### Code HTML Complet

```html
<!DOCTYPE html>
<html>
<head>
    <title>Paiement Flutterwave</title>
</head>
<body>
    <h1>Finaliser votre commande</h1>
    
    <form method="POST" action="https://checkout.flutterwave.com/v3/hosted/pay">
        <!-- Cl√© publique -->
        <input type="hidden" name="public_key" value="FLWPUBK_TEST-XXXXXXXXXXXXXXXXXX-X" />
        
        <!-- R√©f√©rence unique de transaction -->
        <input type="hidden" name="tx_ref" value="<?php echo uniqid('tx-'); ?>" />
        
        <!-- Montant -->
        <input type="hidden" name="amount" value="5000" />
        
        <!-- Devise -->
        <input type="hidden" name="currency" value="XAF" />
        
        <!-- M√©thodes de paiement accept√©es -->
        <input type="hidden" name="payment_options" value="card,mobilemoneyghana,ussd" />
        
        <!-- URL de redirection apr√®s paiement -->
        <input type="hidden" name="redirect_url" value="https://votresite.com/payment-callback" />
        
        <!-- Informations client -->
        <input type="hidden" name="customer[email]" value="client@example.com" />
        <input type="hidden" name="customer[name]" value="John Doe" />
        <input type="hidden" name="customer[phonenumber]" value="237690000000" />
        
        <!-- M√©tadonn√©es personnalis√©es -->
        <input type="hidden" name="meta[order_id]" value="12345" />
        <input type="hidden" name="meta[product_name]" value="Produit XYZ" />
        
        <!-- Configuration optionnelle -->
        <!-- Dur√©e de session en minutes (max: 1440) -->
        <input type="hidden" name="configurations[session_duration]" value="30" />
        
        <!-- Nombre maximum de tentatives -->
        <input type="hidden" name="configurations[max_retry_attempt]" value="3" />
        
        <!-- Titre personnalis√© -->
        <input type="hidden" name="customizations[title]" value="Ma Boutique" />
        <input type="hidden" name="customizations[description]" value="Paiement pour commande #12345" />
        <input type="hidden" name="customizations[logo]" value="https://votresite.com/logo.png" />
        
        <!-- Bouton de paiement -->
        <button type="submit" style="padding: 15px 30px; background: #f5a623; color: white; border: none; cursor: pointer; font-size: 16px;">
            Payer Maintenant
        </button>
    </form>
</body>
</html>
```

### Devises Support√©es (Afrique)

- **XAF** : Franc CFA (Cameroun, etc.)
- **NGN** : Naira Nig√©rian
- **GHS** : Cedi Ghan√©en
- **KES** : Shilling Kenyan
- **ZAR** : Rand Sud-Africain
- **UGX** : Shilling Ougandais
- **TZS** : Shilling Tanzanien
- **USD**, **EUR**, **GBP** (international)

---

## Impl√©mentation JavaScript Inline

### M√©thode Avanc√©e (Modal de Paiement)

L'int√©gration Inline affiche un modal de paiement directement sur votre site sans redirection.

#### Code HTML + JavaScript

```html
<!DOCTYPE html>
<html>
<head>
    <title>Paiement Inline Flutterwave</title>
    <!-- Charger le SDK Flutterwave -->
    <script src="https://checkout.flutterwave.com/v3.js"></script>
</head>
<body>
    <h1>Payer avec Flutterwave Inline</h1>
    <button onclick="makePayment()" style="padding: 15px 30px; background: #f5a623; color: white; border: none; cursor: pointer;">
        Payer 5000 XAF
    </button>

    <script>
        function makePayment() {
            FlutterwaveCheckout({
                public_key: "FLWPUBK_TEST-XXXXXXXXXXXXXXXXXX-X",
                tx_ref: "tx-" + Date.now(),
                amount: 5000,
                currency: "XAF",
                payment_options: "card,mobilemoney,ussd",
                
                // Informations client
                customer: {
                    email: "client@example.com",
                    phone_number: "237690000000",
                    name: "John Doe",
                },
                
                // Personnalisation
                customizations: {
                    title: "Ma Boutique",
                    description: "Paiement pour votre commande",
                    logo: "https://votresite.com/logo.png",
                },
                
                // M√©tadonn√©es
                meta: {
                    order_id: "12345",
                    product_name: "Produit XYZ"
                },
                
                // Callback apr√®s paiement
                callback: function (data) {
                    console.log("Paiement termin√©:", data);
                    
                    if (data.status === "successful") {
                        // V√©rifier la transaction c√¥t√© serveur
                        verifyTransaction(data.transaction_id);
                    } else {
                        alert("Paiement √©chou√© ou annul√©");
                    }
                },
                
                // Callback en cas de fermeture du modal
                onclose: function() {
                    console.log("Modal de paiement ferm√©");
                }
            });
        }
        
        // Fonction pour v√©rifier la transaction (appel API c√¥t√© serveur)
        function verifyTransaction(transactionId) {
            fetch('/api/verify-payment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ transaction_id: transactionId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.verified) {
                    alert("Paiement confirm√© !");
                    // Rediriger vers page de succ√®s
                    window.location.href = "/success";
                } else {
                    alert("Erreur de v√©rification du paiement");
                }
            })
            .catch(error => {
                console.error("Erreur:", error);
            });
        }
    </script>
</body>
</html>
```

---

## V√©rification des Transactions

**‚ö†Ô∏è CRITIQUE** : Toujours v√©rifier les transactions c√¥t√© serveur avec votre Secret Key.

### Apr√®s le Paiement

Flutterwave redirige vers votre `redirect_url` avec ces param√®tres :

- `status` : "successful" ou "cancelled"
- `tx_ref` : Votre r√©f√©rence de transaction
- `transaction_id` : ID Flutterwave (si succ√®s)

### Endpoint de V√©rification

**URL** : `GET https://api.flutterwave.com/v3/transactions/{transaction_id}/verify`

#### Exemple Node.js (Express)

```javascript
const express = require('express');
const axios = require('axios');
const app = express();

app.get('/payment-callback', async (req, res) => {
    const { status, tx_ref, transaction_id } = req.query;
    
    if (status === 'successful') {
        try {
            // V√©rifier la transaction
            const response = await axios.get(
                `https://api.flutterwave.com/v3/transactions/${transaction_id}/verify`,
                {
                    headers: {
                        'Authorization': `Bearer ${process.env.FLW_SECRET_KEY}`
                    }
                }
            );
            
            const transaction = response.data.data;
            
            // R√©cup√©rer les d√©tails de la commande depuis votre DB
            const orderDetails = await getOrderByTxRef(tx_ref);
            
            // V√©rifications de s√©curit√©
            if (
                transaction.status === "successful" &&
                transaction.amount === orderDetails.amount &&
                transaction.currency === orderDetails.currency
            ) {
                // Succ√®s ! Marquer la commande comme pay√©e
                await markOrderAsPaid(orderDetails.id);
                
                res.redirect('/success?order=' + orderDetails.id);
            } else {
                // Montant ou devise incorrect
                res.redirect('/payment-failed');
            }
            
        } catch (error) {
            console.error('Erreur de v√©rification:', error);
            res.redirect('/payment-error');
        }
    } else {
        // Paiement annul√©
        res.redirect('/payment-cancelled');
    }
});

app.listen(3000);
```

#### Exemple avec SDK Node.js

```javascript
const Flutterwave = require('flutterwave-node-v3');
const flw = new Flutterwave(
    process.env.FLW_PUBLIC_KEY,
    process.env.FLW_SECRET_KEY
);

app.get('/payment-callback', async (req, res) => {
    if (req.query.status === 'successful') {
        const response = await flw.Transaction.verify({
            id: req.query.transaction_id
        });
        
        if (response.data.status === 'successful') {
            // Traiter le paiement
        }
    }
});
```

### R√©ponse de V√©rification (JSON)

```json
{
  "status": "success",
  "message": "Transaction fetched successfully",
  "data": {
    "id": 2556677,
    "tx_ref": "tx-019203",
    "flw_ref": "FLW-MOCK-4d8805e5b7b01c07e66f8f8b",
    "device_fingerprint": "N/A",
    "amount": 5000,
    "currency": "XAF",
    "charged_amount": 5000,
    "app_fee": 70,
    "merchant_fee": 0,
    "processor_response": "Approved",
    "auth_model": "PIN",
    "ip": "197.149.95.62",
    "narration": "CARD Transaction ",
    "status": "successful",
    "payment_type": "card",
    "created_at": "2023-08-01T10:30:00.000Z",
    "account_id": 12345,
    "customer": {
      "id": 789012,
      "name": "John Doe",
      "phone_number": "237690000000",
      "email": "client@example.com",
      "created_at": "2023-08-01T10:25:00.000Z"
    },
    "card": {
      "first_6digits": "418742",
      "last_4digits": "4246",
      "issuer": "MASTERCARD",
      "country": "NG",
      "type": "DEBIT",
      "expiry": "09/32"
    }
  }
}
```

---

## Gestion des Webhooks

Les webhooks notifient votre serveur automatiquement apr√®s chaque transaction.

### Configuration des Webhooks

1. Allez dans **Settings** ‚Üí **Webhooks** dans votre dashboard
2. Ajoutez votre URL de webhook : `https://votresite.com/webhooks/flutterwave`
3. Copiez votre **Secret Hash** (pour v√©rifier l'authenticit√©)

### √âv√©nements Disponibles

- `charge.completed` : Paiement r√©ussi
- `transfer.completed` : Transfert termin√©
- `refund.created` : Remboursement cr√©√©

### Exemple de R√©ception de Webhook (Node.js)

```javascript
const crypto = require('crypto');
const express = require('express');
const app = express();

app.use(express.json());

app.post('/webhooks/flutterwave', (req, res) => {
    const secretHash = process.env.FLW_SECRET_HASH;
    const signature = req.headers["verif-hash"];
    
    // V√©rifier l'authenticit√© du webhook
    if (!signature || (signature !== secretHash)) {
        return res.status(401).send('Unauthorized');
    }
    
    const payload = req.body;
    
    // Traiter l'√©v√©nement
    if (payload.event === 'charge.completed') {
        const transaction = payload.data;
        
        if (transaction.status === 'successful') {
            // Mettre √† jour votre base de donn√©es
            console.log('Paiement r√©ussi:', transaction.tx_ref);
            
            // Envoyer confirmation au client, etc.
        }
    }
    
    res.status(200).send('OK');
});

app.listen(3000);
```

### Format du Webhook

```json
{
  "event": "charge.completed",
  "data": {
    "id": 2556677,
    "tx_ref": "tx-019203",
    "flw_ref": "FLW-MOCK-4d8805e5b7b01c07e66f8f8b",
    "amount": 5000,
    "currency": "XAF",
    "charged_amount": 5000,
    "status": "successful",
    "payment_type": "card",
    "customer": {
      "id": 789012,
      "name": "John Doe",
      "email": "client@example.com"
    },
    "created_at": "2023-08-01T10:30:00.000Z"
  }
}
```

---

## Cartes de Test

### Carte de Test Universelle

- **Num√©ro** : `4187427415564246`
- **CVV** : `828`
- **Expiration** : `09/32`
- **PIN** : `3310`
- **OTP** : `12345`

### Autres Cartes de Test

#### Carte Mastercard
- **Num√©ro** : `5531886652142950`
- **CVV** : `564`
- **Expiration** : `09/32`
- **PIN** : `3310`

#### Carte Visa (3D Secure)
- **Num√©ro** : `4556052704172643`
- **CVV** : `899`
- **Expiration** : `09/32`

### Comptes Bancaires de Test (Nigeria)

- **Banque** : Zenith Bank
- **Num√©ro de compte** : `0690000031`
- **OTP** : `12345`

---

## S√©curit√© et Bonnes Pratiques

### ‚úÖ √Ä Faire

1. **Toujours v√©rifier les transactions c√¥t√© serveur**
   - Ne jamais faire confiance uniquement au callback frontend
   
2. **Stocker les cl√©s en toute s√©curit√©**
   ```bash
   # Fichier .env
   FLW_PUBLIC_KEY=FLWPUBK_TEST-xxxxx
   FLW_SECRET_KEY=FLWSECK_TEST-xxxxx
   FLW_ENCRYPTION_KEY=FLWSECK_TEST-xxxxx
   FLW_SECRET_HASH=your-webhook-secret
   ```

3. **G√©n√©rer des r√©f√©rences uniques**
   ```javascript
   const tx_ref = `tx-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
   ```

4. **Valider les montants**
   - V√©rifier que le montant pay√© correspond au montant attendu
   - V√©rifier la devise

5. **G√©rer les erreurs gracieusement**
   - Afficher des messages clairs aux utilisateurs
   - Logger les erreurs pour le d√©bogage

6. **Utiliser HTTPS**
   - Toutes les communications doivent √™tre chiffr√©es

7. **Impl√©menter les webhooks**
   - Pour √™tre notifi√© m√™me si l'utilisateur ferme la page

### ‚ùå √Ä √âviter

1. **Ne jamais exposer la Secret Key publiquement**
   - Pas dans le code frontend
   - Pas dans le contr√¥le de version (Git)

2. **Ne pas faire confiance uniquement au client**
   - Toujours v√©rifier c√¥t√© serveur

3. **Ne pas ignorer les webhooks**
   - C'est la m√©thode la plus fiable

4. **Ne pas utiliser le mode Live sans tests**
   - Toujours tester en mode Test d'abord

---

## Flux Complet de Paiement

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   Client    ‚îÇ
‚îÇ  (Browser)  ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
       ‚îÇ
       ‚îÇ 1. Clique sur "Payer"
       ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  Votre Site Web         ‚îÇ
‚îÇ  (Frontend)             ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
       ‚îÇ
       ‚îÇ 2. Affiche modal/redirige
       ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  Flutterwave Checkout   ‚îÇ
‚îÇ  (Page de paiement)     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
       ‚îÇ
       ‚îÇ 3. Client entre infos + paie
       ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  Banque                 ‚îÇ
‚îÇ  (Traitement)           ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
       ‚îÇ
       ‚îÇ 4. Confirmation
       ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  Flutterwave            ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
       ‚îÇ
       ‚îú‚îÄ 5a. Redirect vers votre site
       ‚îÇ
       ‚îî‚îÄ 5b. Envoie webhook
       ‚îÇ
       ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  Votre Serveur          ‚îÇ
‚îÇ  (Backend)              ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
       ‚îÇ
       ‚îÇ 6. V√©rifie la transaction
       ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  Flutterwave API        ‚îÇ
‚îÇ  /verify                ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
       ‚îÇ
       ‚îÇ 7. Confirmation finale
       ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  Votre Base de Donn√©es  ‚îÇ
‚îÇ  (Marquer comme pay√©)   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
       ‚îÇ
       ‚îÇ 8. Affiche succ√®s
       ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   Client    ‚îÇ
‚îÇ  (Heureux!) ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

---

## Exemple Complet : Application Node.js + Express

### Structure du Projet

```
mon-app/
‚îú‚îÄ‚îÄ .env
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ server.js
‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îî‚îÄ‚îÄ checkout.html
‚îî‚îÄ‚îÄ routes/
    ‚îî‚îÄ‚îÄ payments.js
```

### Fichier .env

```env
FLW_PUBLIC_KEY=FLWPUBK_TEST-xxxxx
FLW_SECRET_KEY=FLWSECK_TEST-xxxxx
FLW_SECRET_HASH=your-webhook-secret
PORT=3000
```

### server.js

```javascript
require('dotenv').config();
const express = require('express');
const paymentRoutes = require('./routes/payments');

const app = express();

app.use(express.json());
app.use(express.static('public'));
app.use('/api', paymentRoutes);

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Serveur lanc√© sur le port ${PORT}`);
});
```

### routes/payments.js

```javascript
const express = require('express');
const axios = require('axios');
const router = express.Router();

// V√©rifier un paiement
router.post('/verify-payment', async (req, res) => {
    const { transaction_id } = req.body;
    
    try {
        const response = await axios.get(
            `https://api.flutterwave.com/v3/transactions/${transaction_id}/verify`,
            {
                headers: {
                    'Authorization': `Bearer ${process.env.FLW_SECRET_KEY}`
                }
            }
        );
        
        const transaction = response.data.data;
        
        if (transaction.status === 'successful') {
            // TODO: Sauvegarder dans votre DB
            
            res.json({
                verified: true,
                message: 'Paiement v√©rifi√© avec succ√®s',
                data: transaction
            });
        } else {
            res.json({
                verified: false,
                message: 'Paiement non r√©ussi'
            });
        }
        
    } catch (error) {
        console.error('Erreur de v√©rification:', error);
        res.status(500).json({
            verified: false,
            message: 'Erreur lors de la v√©rification'
        });
    }
});

// Recevoir les webhooks
router.post('/webhooks/flutterwave', (req, res) => {
    const signature = req.headers['verif-hash'];
    
    if (signature !== process.env.FLW_SECRET_HASH) {
        return res.status(401).send('Unauthorized');
    }
    
    const payload = req.body;
    
    if (payload.event === 'charge.completed') {
        const transaction = payload.data;
        
        if (transaction.status === 'successful') {
            console.log('Webhook re√ßu - Paiement r√©ussi:', transaction.tx_ref);
            // TODO: Mettre √† jour votre DB
        }
    }
    
    res.status(200).send('OK');
});

// Callback apr√®s paiement
router.get('/payment-callback', async (req, res) => {
    const { status, tx_ref, transaction_id } = req.query;
    
    if (status === 'successful') {
        // V√©rifier la transaction
        // Puis rediriger vers page de succ√®s
        res.redirect(`/success.html?ref=${tx_ref}`);
    } else {
        res.redirect('/cancelled.html');
    }
});

module.exports = router;
```

### public/checkout.html

```html
<!DOCTYPE html>
<html>
<head>
    <title>Checkout</title>
    <script src="https://checkout.flutterwave.com/v3.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 600px;
            margin: 50px auto;
            padding: 20px;
        }
        button {
            background: #f5a623;
            color: white;
            padding: 15px 30px;
            border: none;
            cursor: pointer;
            font-size: 16px;
            border-radius: 5px;
        }
        button:hover {
            background: #e09612;
        }
    </style>
</head>
<body>
    <h1>Finaliser votre commande</h1>
    <p>Montant √† payer : <strong>5000 XAF</strong></p>
    <button onclick="makePayment()">Payer Maintenant</button>

    <script>
        function makePayment() {
            FlutterwaveCheckout({
                public_key: "FLWPUBK_TEST-XXXXXXXXXXXXXXXXXX-X", // Remplacer par votre cl√©
                tx_ref: "tx-" + Date.now(),
                amount: 5000,
                currency: "XAF",
                payment_options: "card,mobilemoney,ussd",
                
                customer: {
                    email: "client@example.com",
                    phone_number: "237690000000",
                    name: "John Doe",
                },
                
                customizations: {
                    title: "Ma Boutique",
                    description: "Paiement pour votre commande",
                    logo: "https://votresite.com/logo.png",
                },
                
                callback: function (data) {
                    if (data.status === "successful") {
                        verifyTransaction(data.transaction_id);
                    } else {
                        alert("Paiement √©chou√© ou annul√©");
                    }
                },
                
                onclose: function() {
                    console.log("Modal ferm√©");
                }
            });
        }
        
        function verifyTransaction(transactionId) {
            fetch('/api/verify-payment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ transaction_id: transactionId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.verified) {
                    window.location.href = "/success.html";
                } else {
                    alert("Erreur de v√©rification du paiement");
                }
            })
            .catch(error => {
                console.error("Erreur:", error);
            });
        }
    </script>
</body>
</html>
```

---

## APIs Avanc√©es

### 1. Cr√©er un Lien de Paiement

Cr√©ez un lien de paiement r√©utilisable ou √† usage unique.

**Endpoint** : `POST https://api.flutterwave.com/v3/payment-links`

```javascript
const axios = require('axios');

async function createPaymentLink() {
    const response = await axios.post(
        'https://api.flutterwave.com/v3/payment-links',
        {
            tx_ref: "unique-link-ref-" + Date.now(),
            amount: 5000,
            currency: "XAF",
            payment_options: "card,mobilemoney",
            customer: {
                email: "client@example.com",
                name: "John Doe"
            },
            customizations: {
                title: "Ma Boutique",
                description: "Paiement produit XYZ"
            },
            redirect_url: "https://votresite.com/payment-callback"
        },
        {
            headers: {
                'Authorization': `Bearer ${process.env.FLW_SECRET_KEY}`,
                'Content-Type': 'application/json'
            }
        }
    );
    
    console.log('Lien de paiement:', response.data.data.link);
    return response.data.data.link;
}
```

**R√©ponse** :
```json
{
  "status": "success",
  "message": "Payment link created",
  "data": {
    "link": "https://checkout.flutterwave.com/v3/hosted/pay/abc123xyz",
    "amount": 5000,
    "currency": "XAF",
    "tx_ref": "unique-link-ref-1234567890"
  }
}
```

### 2. Initier un Transfert (Payout)

Envoyez de l'argent directement sur un compte bancaire.

**Endpoint** : `POST https://api.flutterwave.com/v3/transfers`

```javascript
async function initiateTransfer() {
    const response = await axios.post(
        'https://api.flutterwave.com/v3/transfers',
        {
            account_bank: "044", // Code banque (ex: Access Bank)
            account_number: "0690000032",
            amount: 5000,
            currency: "NGN",
            narration: "Paiement commission",
            reference: "transfer-" + Date.now(),
            callback_url: "https://votresite.com/transfer-callback",
            debit_currency: "NGN"
        },
        {
            headers: {
                'Authorization': `Bearer ${process.env.FLW_SECRET_KEY}`,
                'Content-Type': 'application/json'
            }
        }
    );
    
    return response.data;
}
```

### 3. V√©rifier un Compte Bancaire

Validez les informations bancaires avant de faire un transfert.

**Endpoint** : `POST https://api.flutterwave.com/v3/accounts/resolve`

```javascript
async function verifyBankAccount(accountNumber, bankCode) {
    const response = await axios.post(
        'https://api.flutterwave.com/v3/accounts/resolve',
        {
            account_number: accountNumber,
            account_bank: bankCode
        },
        {
            headers: {
                'Authorization': `Bearer ${process.env.FLW_SECRET_KEY}`,
                'Content-Type': 'application/json'
            }
        }
    );
    
    return response.data.data; // Retourne le nom du titulaire
}

// Utilisation
const accountInfo = await verifyBankAccount("0690000032", "044");
console.log("Titulaire:", accountInfo.account_name);
```

### 4. Obtenir la Liste des Banques

R√©cup√©rez toutes les banques disponibles pour un pays.

**Endpoint** : `GET https://api.flutterwave.com/v3/banks/{country_code}`

```javascript
async function getBanks(country = "NG") {
    const response = await axios.get(
        `https://api.flutterwave.com/v3/banks/${country}`,
        {
            headers: {
                'Authorization': `Bearer ${process.env.FLW_SECRET_KEY}`
            }
        }
    );
    
    return response.data.data;
}

// Utilisation
const banks = await getBanks("NG"); // Nigeria
const cameroonBanks = await getBanks("CM"); // Cameroun
```

**Codes Pays** :
- `NG` : Nigeria
- `GH` : Ghana
- `KE` : Kenya
- `UG` : Uganda
- `ZA` : Afrique du Sud
- `TZ` : Tanzanie
- `CM` : Cameroun

### 5. Cr√©er un Sous-compte (Split Payment)

Partagez automatiquement les paiements avec plusieurs b√©n√©ficiaires.

**Endpoint** : `POST https://api.flutterwave.com/v3/subaccounts`

```javascript
async function createSubAccount() {
    const response = await axios.post(
        'https://api.flutterwave.com/v3/subaccounts',
        {
            account_bank: "044",
            account_number: "0690000032",
            business_name: "Vendeur Partenaire",
            business_email: "vendeur@example.com",
            business_contact: "John Doe",
            business_contact_mobile: "237690000000",
            business_mobile: "237690000000",
            country: "NG",
            split_type: "percentage", // ou "flat"
            split_value: 0.15 // 15% ou montant fixe
        },
        {
            headers: {
                'Authorization': `Bearer ${process.env.FLW_SECRET_KEY}`,
                'Content-Type': 'application/json'
            }
        }
    );
    
    return response.data.data.subaccount_id;
}

// Utiliser le sous-compte dans un paiement
function makePaymentWithSplit(subaccountId) {
    FlutterwaveCheckout({
        public_key: "FLWPUBK_TEST-xxxxx",
        tx_ref: "tx-" + Date.now(),
        amount: 10000,
        currency: "NGN",
        subaccounts: [
            {
                id: subaccountId,
                transaction_split_ratio: 15 // 15% va au vendeur
            }
        ],
        // ... autres param√®tres
    });
}
```

### 6. Cr√©er un Plan d'Abonnement

Pour les paiements r√©currents.

**Endpoint** : `POST https://api.flutterwave.com/v3/payment-plans`

```javascript
async function createSubscriptionPlan() {
    const response = await axios.post(
        'https://api.flutterwave.com/v3/payment-plans',
        {
            amount: 5000,
            name: "Abonnement Mensuel Premium",
            interval: "monthly", // daily, weekly, monthly, yearly
            duration: 12, // Nombre de fois √† facturer
            currency: "XAF"
        },
        {
            headers: {
                'Authorization': `Bearer ${process.env.FLW_SECRET_KEY}`,
                'Content-Type': 'application/json'
            }
        }
    );
    
    return response.data.data.id; // Plan ID
}

// Utiliser le plan dans un paiement
function subscribeCustomer(planId) {
    FlutterwaveCheckout({
        public_key: "FLWPUBK_TEST-xxxxx",
        tx_ref: "tx-" + Date.now(),
        amount: 5000,
        currency: "XAF",
        payment_plan: planId,
        customer: {
            email: "client@example.com",
            name: "John Doe"
        }
    });
}
```

### 7. Obtenir l'Historique des Transactions

**Endpoint** : `GET https://api.flutterwave.com/v3/transactions`

```javascript
async function getTransactions(page = 1, from, to) {
    const params = new URLSearchParams({
        page: page,
        from: from || '2024-01-01',
        to: to || new Date().toISOString().split('T')[0]
    });
    
    const response = await axios.get(
        `https://api.flutterwave.com/v3/transactions?${params}`,
        {
            headers: {
                'Authorization': `Bearer ${process.env.FLW_SECRET_KEY}`
            }
        }
    );
    
    return response.data.data;
}

// Obtenir une transaction sp√©cifique par tx_ref
async function getTransactionByRef(txRef) {
    const response = await axios.get(
        `https://api.flutterwave.com/v3/transactions?tx_ref=${txRef}`,
        {
            headers: {
                'Authorization': `Bearer ${process.env.FLW_SECRET_KEY}`
            }
        }
    );
    
    return response.data.data[0];
}
```

### 8. Rembourser une Transaction

**Endpoint** : `POST https://api.flutterwave.com/v3/transactions/{transaction_id}/refund`

```javascript
async function refundTransaction(transactionId, amount) {
    const response = await axios.post(
        `https://api.flutterwave.com/v3/transactions/${transactionId}/refund`,
        {
            amount: amount // Optionnel : remboursement partiel
        },
        {
            headers: {
                'Authorization': `Bearer ${process.env.FLW_SECRET_KEY}`,
                'Content-Type': 'application/json'
            }
        }
    );
    
    return response.data;
}
```

---

## Gestion des Erreurs

### Codes d'Erreur Courants

| Code | Message | Solution |
|------|---------|----------|
| 401 | Unauthorized | V√©rifier votre Secret Key |
| 400 | Bad Request | V√©rifier le format de votre requ√™te |
| 404 | Not Found | L'endpoint ou la ressource n'existe pas |
| 429 | Too Many Requests | Rate limit atteint, r√©essayer plus tard |
| 500 | Internal Server Error | Erreur c√¥t√© Flutterwave, contacter le support |

### Exemple de Gestion d'Erreurs

```javascript
async function makePaymentRequest(payload) {
    try {
        const response = await axios.post(
            'https://api.flutterwave.com/v3/payments',
            payload,
            {
                headers: {
                    'Authorization': `Bearer ${process.env.FLW_SECRET_KEY}`,
                    'Content-Type': 'application/json'
                }
            }
        );
        
        return {
            success: true,
            data: response.data
        };
        
    } catch (error) {
        if (error.response) {
            // Erreur de r√©ponse du serveur
            console.error('Erreur API:', error.response.status);
            console.error('Message:', error.response.data.message);
            
            return {
                success: false,
                error: error.response.data.message,
                code: error.response.status
            };
        } else if (error.request) {
            // Pas de r√©ponse re√ßue
            console.error('Pas de r√©ponse du serveur');
            return {
                success: false,
                error: 'Impossible de contacter le serveur'
            };
        } else {
            // Erreur lors de la configuration
            console.error('Erreur:', error.message);
            return {
                success: false,
                error: error.message
            };
        }
    }
}
```

---

## Testing et Debugging

### 1. Mode Test vs Mode Live

```javascript
// D√©terminer le mode bas√© sur l'environnement
const isProduction = process.env.NODE_ENV === 'production';

const publicKey = isProduction 
    ? process.env.FLW_PUBLIC_KEY_LIVE 
    : process.env.FLW_PUBLIC_KEY_TEST;

const secretKey = isProduction 
    ? process.env.FLW_SECRET_KEY_LIVE 
    : process.env.FLW_SECRET_KEY_TEST;
```

### 2. Logger les Transactions

```javascript
const winston = require('winston');

const logger = winston.createLogger({
    level: 'info',
    format: winston.format.json(),
    transports: [
        new winston.transports.File({ filename: 'error.log', level: 'error' }),
        new winston.transports.File({ filename: 'transactions.log' })
    ]
});

// Utilisation
logger.info('Transaction initi√©e', {
    tx_ref: txRef,
    amount: amount,
    customer: customerEmail
});

logger.error('√âchec de v√©rification', {
    transaction_id: transactionId,
    error: error.message
});
```

### 3. Tester les Webhooks Localement

Utilisez [ngrok](https://ngrok.com/) pour exposer votre serveur local :

```bash
# Installer ngrok
npm install -g ngrok

# Exposer votre serveur local
ngrok http 3000

# Copier l'URL HTTPS g√©n√©r√©e (ex: https://abc123.ngrok.io)
# L'ajouter dans Settings > Webhooks sur Flutterwave
```

### 4. Simuler des Sc√©narios de Test

```javascript
// Tester un paiement r√©ussi
function testSuccessfulPayment() {
    return {
        tx_ref: "test-success-" + Date.now(),
        amount: 5000,
        currency: "XAF",
        customer: {
            email: "test@example.com",
            name: "Test User"
        }
    };
}

// Tester un paiement √©chou√© (carte insuffisante)
function testFailedPayment() {
    // Utiliser une carte de test sp√©cifique qui √©choue
    return {
        tx_ref: "test-failed-" + Date.now(),
        amount: 5000,
        currency: "XAF"
        // La carte de test √©chouera automatiquement
    };
}
```

---

## Optimisation des Performances

### 1. Mise en Cache des Banques

```javascript
const NodeCache = require('node-cache');
const cache = new NodeCache({ stdTTL: 86400 }); // 24 heures

async function getBanksWithCache(country = "NG") {
    const cacheKey = `banks_${country}`;
    
    // V√©rifier le cache
    const cachedBanks = cache.get(cacheKey);
    if (cachedBanks) {
        return cachedBanks;
    }
    
    // Sinon, r√©cup√©rer depuis l'API
    const banks = await getBanks(country);
    
    // Mettre en cache
    cache.set(cacheKey, banks);
    
    return banks;
}
```

### 2. Rate Limiting

```javascript
const rateLimit = require('express-rate-limit');

const paymentLimiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 10, // Max 10 requ√™tes par IP
    message: 'Trop de tentatives de paiement, r√©essayez plus tard'
});

app.post('/api/initiate-payment', paymentLimiter, async (req, res) => {
    // Traiter le paiement
});
```

### 3. Queue pour les Webhooks

```javascript
const Queue = require('bull');
const webhookQueue = new Queue('webhook-processing');

// Ajouter √† la queue
app.post('/webhooks/flutterwave', (req, res) => {
    const signature = req.headers['verif-hash'];
    
    if (signature === process.env.FLW_SECRET_HASH) {
        // Ajouter √† la queue pour traitement asynchrone
        webhookQueue.add(req.body);
        res.status(200).send('OK');
    } else {
        res.status(401).send('Unauthorized');
    }
});

// Traiter la queue
webhookQueue.process(async (job) => {
    const payload = job.data;
    
    if (payload.event === 'charge.completed') {
        // Traiter le paiement
        await processPayment(payload.data);
    }
});
```

---

## Conformit√© et R√©glementation

### 1. PCI-DSS Compliance

Flutterwave est certifi√© PCI-DSS Level 1. Vous n'avez **pas besoin** de g√©rer les donn√©es de carte vous-m√™me.

**Bonnes pratiques** :
- Ne jamais stocker les num√©ros de carte
- Ne jamais logger les CVV ou PINs
- Utiliser Flutterwave Inline ou Standard pour la collecte

### 2. RGPD / GDPR

```javascript
// Anonymiser les donn√©es apr√®s un certain d√©lai
async function anonymizeOldTransactions() {
    const sixMonthsAgo = new Date();
    sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);
    
    await Transaction.updateMany(
        { created_at: { $lt: sixMonthsAgo } },
        {
            $set: {
                'customer.email': 'anonymized@example.com',
                'customer.name': 'Anonymized User',
                'customer.phone': 'XXXXXXXXXX'
            }
        }
    );
}
```

### 3. Audit Trail

```javascript
// Logger toutes les actions importantes
function auditLog(action, userId, details) {
    const logEntry = {
        timestamp: new Date(),
        action: action,
        userId: userId,
        details: details,
        ip: req.ip
    };
    
    // Sauvegarder dans une collection s√©par√©e
    AuditLog.create(logEntry);
}

// Utilisation
auditLog('PAYMENT_INITIATED', userId, { amount: 5000, tx_ref: txRef });
auditLog('PAYMENT_VERIFIED', userId, { transaction_id: transactionId });
```

---

## Checklist de Mise en Production

### Avant le Lancement

- [ ] Tester tous les flux de paiement en mode Test
- [ ] V√©rifier la v√©rification des transactions c√¥t√© serveur
- [ ] Impl√©menter et tester les webhooks
- [ ] Configurer les variables d'environnement de production
- [ ] S√©curiser les cl√©s API (ne pas les exposer)
- [ ] Activer HTTPS sur votre site
- [ ] Tester sur diff√©rents navigateurs et appareils
- [ ] V√©rifier la gestion des erreurs
- [ ] Impl√©menter le logging
- [ ] Configurer les notifications par email
- [ ] Tester les remboursements
- [ ] V√©rifier la conformit√© RGPD
- [ ] Documenter le processus pour votre √©quipe

### Apr√®s le Lancement

- [ ] Monitorer les transactions quotidiennement
- [ ] V√©rifier les webhooks re√ßus
- [ ] Surveiller les taux d'√©chec
- [ ] Contacter les clients en cas de paiements √©chou√©s
- [ ] Analyser les m√©triques de conversion
- [ ] Optimiser le tunnel de paiement
- [ ] Mettre √† jour la documentation technique

---

## Ressources Suppl√©mentaires

### Documentation Officielle
- **Documentation API** : https://developer.flutterwave.com/
- **Dashboard** : https://app.flutterwave.com/
- **Support** : https://flutterwave.com/support

### SDKs Officiels
- **Node.js** : `npm install flutterwave-node-v3`
- **PHP** : `composer require flutterwavedev/flutterwave-v3`
- **Ruby** : `gem install flutterwave_sdk`
- **Python** : `pip install flutterwave`

### Outils Utiles
- **Postman Collection** : Testez l'API directement
- **ngrok** : Pour tester les webhooks localement
- **GitHub** : https://github.com/Flutterwave

### Support
- **Email** : [email protected]
- **Chat** : Via le dashboard
- **Communaut√©** : Slack, Discord

---

## FAQ

**Q : Combien de temps pour activer mon compte Live ?**
R : G√©n√©ralement 1-3 jours ouvrables apr√®s soumission des documents.

**Q : Quels sont les frais ?**
R : Varie selon le pays et le volume. Contactez Flutterwave pour les d√©tails.

**Q : Puis-je accepter les paiements internationaux ?**
R : Oui, cartes Visa/Mastercard internationales accept√©es.

**Q : Comment g√©rer les remboursements ?**
R : Via l'API de remboursement ou depuis le dashboard.

**Q : Les paiements Mobile Money sont-ils instantan√©s ?**
R : Oui, mais peuvent prendre quelques minutes selon l'op√©rateur.

**Q : Puis-je personnaliser la page de paiement ?**
R : Oui, via les param√®tres de customization (logo, couleurs, etc.).

**Q : Que faire si ma cl√© est compromise ?**
R : G√©n√©rer imm√©diatement de nouvelles cl√©s depuis le dashboard.

---
